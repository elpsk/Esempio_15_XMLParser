//
//  PGPoint.m
//  PGIPHONE
//
//  Created by Alberto Pasca on 08/10/10.
//  Copyright 2010 SEAT Pagine Gialle - Cutaway SRL. All rights reserved.
//

#import "PGPoint.h"
#import "PGMap.h"
#import "PGFormule.h"
#import "PGDevice.h"
#import "PGConfig.h"

/**
 *  Internals Methods.
 */
@interface PGPoint (Internals)
  - (UIImage*) GetPallino:(PGPointType)Type;
  - (CGPoint) GetAncor:(PGPointType)Type;
  - (void) ProtocolManager:(SEL)selector andObject:(id)Obj;
  - (void) handleCalloutClick:(UIControl*)control;
@end

/**
 * Classe PGPoint per disegnare e aggiungere un pallino sulla mappa
 */
@implementation PGPoint

@synthesize delegate=m_Delegate, Position=m_Position;

- (CGPoint) GetAncor:(PGPointType)Type {
  switch ( Type ) {
    case PGPointTypeLocation : return CGPointMake(0.5, 0.5);
  }
  return CGPointMake(0.5, 1);
}

- (UIImage*) GetPallino:(PGPointType)Type {
	@try {
		switch( Type ) {
			case PGPointTypeTransparent: {
        UIImage *pgpointtrasnparent = nil;
        if ( !pgpointtrasnparent ) pgpointtrasnparent = [UIImage imageNamed:@"PgLib.bundle/PGPointTransparent.png"];
				return pgpointtrasnparent;
      }
			case PGPointTypeYellow: {
        UIImage *pgpointyellow = nil;
        if ( !pgpointyellow ) pgpointyellow = [UIImage imageNamed:@"PgLib.bundle/mk_pallino.png"];
				return pgpointyellow;
      }
			case PGPointTypeBlue: {
        UIImage *pgpointblue = nil;
        if ( !pgpointblue ) pgpointblue = [UIImage imageNamed:@"PgLib.bundle/mk_pallino_blue.png"];
				return pgpointblue;
      }
			case PGPointTypeManStatic: {
        UIImage *pgpointmstatic = nil;
        if ( !pgpointmstatic ) pgpointmstatic = [UIImage imageNamed:@"PgLib.bundle/iphone_static.png"];
				return pgpointmstatic;
      }
			case PGPointTypeManMoving: {
        UIImage *pgpointmmove = nil;
        if ( !pgpointmmove ) pgpointmmove = [UIImage imageNamed:@"PgLib.bundle/iphone_moving.png"];
				return pgpointmmove;
      }
			case PGPointTypeCenter: {
        UIImage *pgpointcentro = nil;
        if ( !pgpointcentro ) pgpointcentro = [UIImage imageNamed:@"PgLib.bundle/iphone_centro.png"];
				return pgpointcentro;
      }
			case PGPointTypeLocation: {
        UIImage *pgpointlocation = nil;
        if ( !pgpointlocation ) pgpointlocation = [UIImage imageNamed:@"PgLib.bundle/pin.png"];
				return pgpointlocation;
      }
			case PGPointTypeCompass: {
        UIImage *pgpointcompass = nil;
        if ( !pgpointcompass ) pgpointcompass = [UIImage imageNamed:@"PgLib.bundle/CompassPoint.png"];
				return pgpointcompass;
      }
      case PGPointTypeCanvas: {
				UIImage *pgpointcanvas = nil;
        if ( !pgpointcanvas ) pgpointcanvas = [UIImage imageNamed:@"PgLib.bundle/mk_canvas.png"];
				return pgpointcanvas;
      }
      case PGPointTypeOpec: {
				UIImage *pgpointopec = nil;
        if ( !pgpointopec ) pgpointopec = [UIImage imageNamed:@"PgLib.bundle/mk_opec.png"];
				return pgpointopec;
      }
      case PGPointTypeIpadYellow: {
				UIImage *pgpointipady = nil;
        if ( !pgpointipady ) pgpointipady = [UIImage imageNamed:@"PgLib.bundle/YellowPagesMarker.png"];
				return pgpointipady;
      }
      case PGPointTypeIpadWhite: {
				UIImage *pgpointipadw = nil;
        if ( !pgpointipadw ) pgpointipadw = [UIImage imageNamed:@"PgLib.bundle/WhitePagesMarker.png"];
				return pgpointipadw;
      }
      case PGPointTypePlaceholder: {
				UIImage *pgpointplace = nil;
        if ( !pgpointplace ) pgpointplace = [UIImage imageNamed:@"PgLib.bundle/WhitePagesMarker.png"];
				return pgpointplace;
      }
      case PGPointTypeCustom: return nil;

      case PGPointTypeDefault:
			default: {
				UIImage *pgpointdef = nil;
        if ( !pgpointdef ) pgpointdef = [UIImage imageNamed:@"PgLib.bundle/mk_pallino.png"];
				return pgpointdef;
      }
		}
	}
	@catch (NSException * e) {
		//NSLog(@"PGPoint failed to load.");
	}
  return nil;
}

- (id) initWith:(CLLocationCoordinate2D)coords 
      pointType:(PGPointType)t 
    isDraggable:(BOOL)drag 
            pos:(CGPoint)p 
         inView:(UIView*)v 
    isTouchable:(BOOL)touchEnabled
{
  self = [super init];

  if ( self ) {

    m_Draggable = drag;
    m_Touchable = touchEnabled;
    
    m_IsLongPress = NO;
    
    m_Map = (PGMap*)v;
    m_Position.latitude  = coords.latitude;
    m_Position.longitude = coords.longitude;

    UIImage *img = [self GetPallino:t];
    if ( img ) [self setImage:img withAnchor:[self GetAncor:t]];

    m_Receiver = m_Object = nil;
    
    m_Callout = nil;
    
    m_TimerLongPress = nil;
  }
  
  return self;
}

- (id) initWith:(CLLocationCoordinate2D)Coords pointType:(PGPointType)Type inView:(UIView*)v isTouchable:(BOOL)touchEnabled {
	return [self initWith:Coords pointType:Type isDraggable:NO pos:CGPointMake(0, 0) inView:v isTouchable:touchEnabled];
}

- (void) setImage:(UIImage*)Image withAnchor:(CGPoint)Point {
  self.layer.anchorPoint = Point;
  
  self.frame = CGRectMake(0,0, Image.size.width, Image.size.height);
  
  UIImageView *iv = [[UIImageView alloc] initWithImage:Image];
  iv.bounds = iv.frame = self.frame;
  iv.backgroundColor = [UIColor clearColor];
  [self addSubview:iv];
  [iv release];
}

- (void) setAnimation:(CABasicAnimation*)Animation {
  [self.layer removeAnimationForKey:@"PGPoint::Animation"];  
  [self.layer addAnimation:Animation forKey:@"PGPoint::Animation"];
}

#pragma mark -
#pragma mark CALLOUT
#pragma mark -

- (void) setCalloutTitle:(NSString*)Title {
	calloutTitle = [Title retain];
}
- (void) setCalloutSubtitle:(NSString*)SubTitle {
	calloutSubTitle = [SubTitle retain];
}

#pragma mark -
#pragma mark TOUCHES
#pragma mark -


- (void) touchesBegan:(NSSet*)t withEvent:(UIEvent*)event {
}

- (void) touchesMoved:(NSSet*)t withEvent:(UIEvent*)event {
}

- (void) touchesEnded:(NSSet*)t withEvent:(UIEvent*)event {
  if ( m_Touchable ) {
    
    if ( m_Map.CurrentPoint != self ) {
      [m_Map.CurrentPoint removeCallout:NO];
      m_Map.CurrentPoint = self;
    }
    else if ( m_Callout && !m_Callout.hidden ) return;
    
    NSSet *allTouches = [event allTouches];
    switch ( [allTouches count] ) {
      case 1: [self ShowCallout]; break;
    }
    
    [self ProtocolManager:@selector(PointClicked:onMap:) andObject:m_Map];
  }
  m_IsLongPress = NO;
}

- (int) InsideTouch:(CGPoint)Touch {
  if ( m_Callout.hidden ) return PGPointTouchOutside;
  
  CGPoint touch = [m_Map.closer convertPoint:Touch toView:m_Callout];
  
  if ( m_Callout && [m_Callout ButtonClicked:touch] ) {
    [self handleCalloutClick:nil];
    return PGPointTouchButton;
  }

  // Bisogna controllare sul m_Callout.bounds perchè è rispetto alle coordinate interne della view
  if ( CGRectContainsPoint(m_Callout.bounds, touch) ) return PGPointTouchCallout;
  
  return PGPointTouchOutside;
}


#pragma mark -
#pragma mark CALLOUT
#pragma mark -

- (void) setCalloutButtonReceiver:(id)Receiver {
	m_Receiver = Receiver;
}

- (void) setCalloutButtonSelector:(SEL)Selector toTarget:(id)Target {
	m_Receiver = Target;
	m_Selector = Selector;
  m_Object   = nil;
}

- (void) setCalloutButtonSelector:(SEL)Selector withObject:(id)Object toTarget:(id)Target {
	m_Receiver = Target;
	m_Selector = Selector;
  m_Object   = [Object retain];
}

- (void) removeCallout:(BOOL)Force {	
	if ( m_Callout ) m_Callout.hidden = YES;
}

- (void) ShowCallout {

  if ( !m_Callout ) {
    if ( m_CustomCallout ) m_Callout = [[PGCallout alloc] initWithView:m_CustomCallout andArrow:m_CustomArrow toPoint:self];
    else m_Callout = [[PGCallout alloc]initWithText:calloutTitle withTextBtm:calloutSubTitle toPoint:self withAction:@selector(handleCalloutClick:)];
    
    [self addSubview:m_Callout];
  }

  CGPoint inpoint = CGPointMake(self.center.x, 0);
  
  CGPoint inmap = [self convertPoint:inpoint toView:m_Map];
  inmap.x -= m_Map.frame.origin.x;
  inmap.y -= m_Map.frame.origin.y;

  CGPoint pan = [m_Callout UpdatePosition:m_Map];
  
  if ( pan.x != 0 || pan.y != 0 ) [m_Map panMapBy:pan withAnimation:YES];

  m_Callout.hidden = NO;
}

- (void) InitCallout {
  if ( !m_Callout ) {
    if ( m_CustomCallout ) m_Callout = [[PGCallout alloc] initWithView:m_CustomCallout andArrow:m_CustomArrow toPoint:self];
    else m_Callout = [[PGCallout alloc]initWithText:calloutTitle withTextBtm:calloutSubTitle toPoint:self withAction:@selector(handleCalloutClick:)];
    [self addSubview:m_Callout];
  }
  m_Callout.hidden = YES;
}

- (void) handleCalloutClick:(UIControl*)control {
  if (m_Receiver && [m_Receiver respondsToSelector:m_Selector] )
    [m_Receiver performSelectorOnMainThread:m_Selector withObject:m_Object waitUntilDone:NO];
}

- (void) setCustomCallout:(UIView*)CustomView {
  if ( m_CustomCallout ) {
    [m_CustomCallout release];
    m_CustomCallout = nil;
  }
  m_CustomArrow   = nil;
  m_CustomCallout = [CustomView retain];
}

- (void) setCustomCallout:(UIView*)CustomView withArrow:(UIImage*)Img {
  if ( m_CustomCallout ) {
    [m_CustomCallout release];
    m_CustomCallout = nil;
  }
  if ( m_CustomArrow ) {
    [m_CustomArrow release];
    m_CustomArrow = nil;
  }
  
  m_CustomArrow   = [Img retain];
  m_CustomCallout = [CustomView retain];
}

#pragma mark -

- (void) ProtocolManager:(SEL)selector andObject:(id)Obj {
  if ( !m_Delegate || ![m_Delegate conformsToProtocol:@protocol(PGPointDelegate)] || ![m_Delegate respondsToSelector:selector] ) return;
  
  [m_Delegate performSelector:selector withObject:self withObject:Obj];
}

- (void)viewDidUnload {
}

- (void)dealloc {  
  if ( m_Object        ) [m_Object        release];
  if ( m_CustomCallout ) [m_CustomCallout release];
  if ( m_CustomArrow   ) [m_CustomArrow   release];
  if ( m_Callout       ) [m_Callout       release];
  if ( calloutTitle    ) [calloutTitle    release];
  if ( calloutSubTitle ) [calloutSubTitle release];

  if ( m_TimerLongPress ) {
    [m_TimerLongPress invalidate];
    [m_TimerLongPress release];
  }
  
  [super dealloc];
}

@end

