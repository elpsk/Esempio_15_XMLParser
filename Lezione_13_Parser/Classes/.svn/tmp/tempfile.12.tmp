//
//  PGMap.m
//  PGIPHONE
//
//  Created by Alberto Pasca on 08/10/10.
//  Copyright 2010 SEAT Pagine Gialle - Cutaway SRL. All rights reserved.
//

#import <QuartzCore/QuartzCore.h>
#include <stdlib.h> 
#include <math.h>

#import "PGMap.h"
#import "PGGps.h"
#import "PGRouteParams.h"
#import "PGFormule.h"
#import "CloserParams.h"
#import "CloserZRange.h"
#import "PGDevice.h"
#import "PGCache.h"
#import "PGStreetView.h"
#import "PGRoute.h"
#import "PGHttpRequest.h"
#import "PGConfig.h"
#import "PGBoundEx.h"
#import "PGException.h"

/**
 *  Internals Methods.
 */
@interface PGMap (Internals)
  - (void) restartTimer;
  - (BOOL) isBoundAllowed:(PGBound)Bound withType:(PGMapType)Type;
  - (void) onMapMove:(CloserMap*)map;
  - (void) onMapZoom:(CloserMap*)map;
  - (void) updateRoute:(id)RoutingReqId;
  - (void) DrawRoute:(NSArray*)Points;
  - (void) getThreadedXml;
  - (void) RefreshRoute;
  - (void) CheckNetworkAval;
  - (void) getRouteCenter:(CLLocationCoordinate2D *) pCenterOut AndZoom: (int *) pZoomOut;
  - (PGBoundEx*) getMapUtmBounds;
  - (void) ClearMap;
  - (void) RemoveGpsPoint;
  - (void) ShowCopyrightLabel:(int)Type;
  - (void) AnimateDropPoints;
  - (void) ClearCurrentPoint;
  - (void) ComputeBound:(PGBound)Bound andCenter:(CLLocationCoordinate2D*)Center andZoom:(int*)Zoom;
  - (CGPoint) getPosition;
  - (void) ProtocolManager:(SEL)selector andObject:(id)Obj;
@end

/**
 *  PGMap Classe per l'init della mappa su UIView.
 */
@implementation PGMap

@synthesize CurrentPoint=m_CurrentPoint, Params=m_Params;

const int InvalidId = -1;

#pragma mark -
#pragma mark INIT
#pragma mark -

/**
 * Metodo per inizializzare la mappa con i parametri personalizzati e il delegate nel caso si voglia utilizzare
 * il protocollo PGMapDelegate
 * @param (CGRect)frame è il contenitore della mappa.
 * @param (PGParams*)params sono i parametri di init.
 * @param (id)deleg il delegate da passare alla mappa
 * @return self
 */
- (id) initWithFrame:(CGRect)rect andConfig:(PGParams*)params andDelegate:(id)deleg
{  
  [self initWithFrame:rect andConfig:params];
	if (deleg != nil) m_Delegate = deleg;
	return self;
}

/**
 * Metodo per inizializzare la mappa con i parametri personalizzati
 * @param (CGRect)frame è il contenitore della mappa.
 * @param (PGParams*)params sono i parametri di init.
 * @return self
 */
- (id) initWithFrame:(CGRect)rect andConfig:(PGParams*)params {

  m_AutoreleasePool = [[NSAutoreleasePool alloc] init];

  // CHECK NETWORK STATUS
	[[NSNotificationCenter defaultCenter] addObserver:self selector:@selector(handleNetworkChange:) name:kReachabilityChangedNotification object:nil];
	m_Net_HostReach = [[PGReachability reachabilityForInternetConnection] retain];
	[m_Net_HostReach startNotifier];
  [self CheckNetworkAval];
  
  @try {
    // Configurazione modalità Mappa    
    
		NSUserDefaults *user = [NSUserDefaults standardUserDefaults];
    NSString *xml = [user stringForKey:@"PgMapConfig"];
    if ( !xml ) {
      NSError *err = nil;
      NSString *filename = [PGConfig GetBundleFile:@"PgMapConfig" ofType:@"xml"];
      xml = [NSString stringWithContentsOfFile:filename encoding:NSUTF8StringEncoding error:&err];
      if ( err ) {
        NSLog(@"%@: %@", filename, [err localizedDescription]);
        return nil;
      }
      [user setObject:xml forKey:@"PgMapConfig"];
    }

    m_Params = [params retain];
    [PGParser MapConfigParser:m_Params inputXml:xml];
    [PGParser MapBoundsParser:m_Params.Bounds inputXml:xml];
    [PGParser MapServerParser:m_Params.Servers inputXml:xml];
  }
  @catch ( NSException *e ) {
    return nil;
  }

  /***********************************************************************************************
   *
   * Fare in blocco perchè incide su tutti i successivi calcoli di posizionamento degli oggetti 
   * 
   * 1. Setto il frame maggiorato di una grandezza costante (MapIncrement)
   * 2. Centro la mappa rispetto alla grandezza della superview
   * 3. Setto il boumnd della mappa rispetto alla posizione originale della superviews
   *
   * NON SERVE PIU' PERCHE' ABBIAMO PRESO POSSESSO DEL super.closer E IL BOUND E' LA NOSTRA VISTA
   ***********************************************************************************************/

  if ( [PGDevice GetPlatformType] == UIDevice3GiPhone ) m_Params.MapIncr = 1,5;
	
	if ( [PGDevice GetPlatformType] == UIDevice1GiPad ) m_Params.MapIncr = 2;

  self = [super initWithFrame:rect andParams:m_Params];
  if ( !self ) return nil;

  //[super.closer setFrame:CGRectMake(self.frame.origin.x, self.frame.origin.y, self.frame.size.width * m_Params.MapIncr, self.frame.size.height * m_Params.MapIncr)];
  //[super.closer setCenter:CGPointMake(self.frame.size.width / 2, self.frame.size.height / 2)];
  /***/

 	[super setClipsToBounds:m_Params.ToClip];
	super.delegate = self;
  
  self.multipleTouchEnabled = YES;
	[self becomeFirstResponder];
  
  // Init della Label per il copyright
	copyRightLabel = [[UILabel alloc] init];
	[copyRightLabel setBackgroundColor:[UIColor clearColor]];
	copyRightLabel.textAlignment = UITextAlignmentRight;  
  
  [self setMapType:m_Params.mapType];

  // NB: la dimensione della griglia NON E' quanto la dimensione della mappa ma quanto la griglia stessa!
  imgView = [[UIImageView alloc] initWithImage:[UIImage imageNamed:[PGDevice GetModelImage]]];
	[imgView setFrame:CGRectMake(0, 0, imgView.frame.size.width, imgView.frame.size.height)];
	[imgView setCenter:CGPointMake(self.frame.size.width / 2, self.frame.size.height / 2)];		
  
  [self addSubview:imgView];
	[self sendSubviewToBack:imgView];
  
  m_Gps = [[PGGps alloc] initWithReceiver:self];

  m_GpsPoint = [[PGGpsPoint alloc] initWithCoord:m_Gps.Location inView:self withAccuracy:m_Gps.Location.horizontalAccuracy andZoom:[super zoom]];
  
  [super addPlaceHolder:m_GpsPoint.Circle :m_Gps.Location.coordinate :CGPointMake(0.5, 0.5)];
  [super addPoint:(UIView*)m_GpsPoint :m_GpsPoint.Position :m_GpsPoint.Anchor];
  [super bringSubviewToFront:m_GpsPoint];
  
  m_GpsPoint.hidden = YES;
  
  m_Points = [[NSMutableArray alloc] init];

  NSMutableDictionary *dict = [NSMutableDictionary dictionary];
  [dict setObject:NSStringFromSelector(@selector(CheckVersionConfiguration:)) forKey:@"selector"];
  [dict setObject:[PGConfig GetKeyAsUrl:@"PgMapConfig" ofFile:@"PGConfig"] forKey:@"query"];
  
  PGHttpWrapper *http = [[[PGHttpWrapper alloc] initWithTarget:self] autorelease];
  [http performSelectorOnMainThread:@selector(RequestData:) withObject:dict waitUntilDone:NO];
  
  m_Delegate    = nil;
  m_Orientation = InvalidId;
	
  return self;
}

- (void) layoutSubviews {
  if ( m_Delegate && [m_Delegate interfaceOrientation] == m_Orientation ) return;
  m_Orientation = [m_Delegate interfaceOrientation];
  
  CLLocationCoordinate2D centro = [super mapCenter];

  [super setAngle:0 withAnimation:YES];

  [super.closer setFrame:CGRectMake(self.frame.origin.x, self.frame.origin.y, self.frame.size.width * m_Params.MapIncr, self.frame.size.height * m_Params.MapIncr)];
  [super.closer setCenter:CGPointMake(self.frame.size.width / 2, self.frame.size.height / 2)];

  [self moveMapTo:centro withAnimation:YES];
  [self ShowCopyrightLabel:super.mapType];
}

- (void)removeFromSuperview {
  [self enableGps:NO];
  [self removePoints];
  [self clearRoute];
  
  [super removeFromSuperview];
}

- (void) CheckNetworkAval {
  NetworkStatus status = [m_Net_HostReach currentReachabilityStatus];	
	if (status == NotReachable) [self ProtocolManager:@selector(NetworkNoPresent:) andObject:nil];
}

- (void) CheckVersionConfiguration:(NSData*)Data {  
  NSString *xml =[[NSString alloc] initWithData:Data encoding:NSUTF8StringEncoding];
  
  PGParams *params = [[PGParams alloc] init];
  [PGParser MapConfigParser:params inputXml:xml];
  [PGParser MapBoundsParser:params.Bounds inputXml:xml];
  [PGParser MapServerParser:params.Servers inputXml:xml];
  
  if ( [m_Params.Version floatValue] < [params.Version floatValue] ) {
    NSUserDefaults *user = [NSUserDefaults standardUserDefaults];
    [user setObject:xml forKey:@"PgMapConfig"];
    
    [m_Params.Bounds removeAllObjects];
    [m_Params.Bounds addObjectsFromArray:params.Bounds];
    
    [m_Params.Servers removeAllObjects];
    [m_Params.Servers addObjectsFromArray:params.Servers];
    
    m_Params.ToClip  = params.ToClip;
    m_Params.PointsForRegions = params.PointsForRegions;
  }
  
  [xml release];
  [params release];
}

#pragma mark -
#pragma mark GPS_POSITION_AND_ANIMATION
#pragma mark -

/**
 * Metodo per disegnare un cerchio su mappa
 * @param (PGCircle*)pCircle classe PGCircle
 */
- (void) enableGps:(BOOL) val {
  [m_Gps EnableLocationService:val];
}

- (void) AddGpsPoint:(CLLocation*)Coord {
  if ( !m_GpsPoint || !Coord ) return;
  m_GpsPoint.hidden = NO;
  [self UpdateGpsPoint:Coord];
  [super moveMapTo:Coord.coordinate withAnimation:YES];
}

- (void) UpdateGpsPoint:(CLLocation*)Coord {
  if ( m_GpsPoint && m_GpsPoint.hidden ) return;
  [self setPoint:m_GpsPoint.Circle :Coord.coordinate];
	[m_GpsPoint.Circle setRadiusInMeters:Coord.horizontalAccuracy];
	[self setPoint:m_GpsPoint :Coord.coordinate];
}

- (void) RemoveGpsPoint {
  if ( !m_GpsPoint ) return;
  m_GpsPoint.hidden = YES;
}

#pragma mark -
#pragma mark COMPASS_MANAGER
#pragma mark -

/**
 * Attiva la bussola automatica
 * @param (BOOL)val ON/OFF
 */
- (void) enableCompass:(BOOL) val {
  [m_Gps EnableHeadingService:val];
}

- (void) SetCompass:(CLHeading*)Heading {
  double mh = (Heading != nil) ? Heading.magneticHeading : 0;
	[super setAngle:-mh withAnimation:YES];
}

#pragma mark -
#pragma mark BOUNDS_BLOCK_LEV -1
#pragma mark -

- (BOOL) isBoundAllowed:(PGBound)Bound withType:(PGMapType)Type {
	float zoom = [self getZoom];
  
  if ( zoom <= 0 && m_Route ) {
    [self setZoom:0];
    return NO;
  }
  
  if ( zoom >= 1 || Type != PGMapTypeStandard ) return YES;
  
  BOOL allowed = NO;
  for ( NSValue *el in m_Params.Bounds ) {
    PGBound bound;
    [el getValue:&bound];
    if ( bound.top <= Bound.top && bound.left <= Bound.left && bound.bottom >= Bound.bottom && bound.right >= Bound.right ) {
      allowed = YES;
      break;
    }
  }
  if ( !allowed ) [self setZoom:0];
  else if ( zoom < -1 ) [self setZoom:-1];
  return allowed;
}

#pragma mark -
#pragma mark MAP_HANDLER
#pragma mark -

-(BOOL) handleMapChange:(CloserMap*)m {
	return YES;
}

-(BOOL) handleMapPinch:(CloserMap*)m {
  if ( super.lastGestureInfo.phase == GPStart ) [self ClearMap];
  else if ( super.lastGestureInfo.phase == GPEnd ) {
    [m_GpsPoint.Circle enableAnimation];
    [m_GpsPoint.Circle setZoom:[super zoom]];
    [self restartTimer];
  }
	if ( super.lastGestureInfo.scale <= 1.0 ) return YES;
  return [self isBoundAllowed:[super mapBounds] withType:super.mapType];
}

-(BOOL) handleMapTap:(CloserMap*)m {
	[m_CurrentPoint removeCallout];
	return YES;
}

-(BOOL) handleMapDoubleTap:(CloserMap*)m {
  [self ClearMap];
	return [self isBoundAllowed:[super mapBounds] withType:super.mapType];
}

-(BOOL) handleMapTwoFingerTap:(CloserMap*)m {
  [self ClearMap];
	return YES;
}

-(BOOL) handleMapDrag:(CloserMap*)m {
  if (      super.lastGestureInfo.phase == GPStart ) [self ClearMap];
	else if ( super.lastGestureInfo.phase == GPMove  ) [imgView setCenter: super.lastGestureInfo.position];
  else if ( super.lastGestureInfo.phase == GPEnd   ) { //end
// Sarà da riabilitare quando avremo l'indice spaziale
//    [self RefreshRoute];
  }
  
	return YES;
}

-(BOOL) handleMapLongPress:(CloserMap*)m {
	return YES;
}

- (void) ClearMap {
  [m_CurrentPoint removeCallout];
  [m_GpsPoint.Circle disableAnimation];
}

#pragma mark -
#pragma mark PUBLIC METHODS
#pragma mark -

/**
 * Centra la mappa alle coordinate specificate
 * @param (double)lat Latitudine
 * @param (double)lon Longitudine
 */
- (void) setCenterWith:(double)Lat AndLon:(double)lon {
	[super setLonLat:lon:Lat];
}

/**
 * Centra la mappa alle coordinate specificate ed esegue lo zoom
 * @param (double)lat Latitudine
 * @param (double)lon Longitudine
 * @param (float)z Zoom
 */
- (void) setCenterWith:(double)Lat AndLon:(double)lon andZoom:(float)z {
	[super setLonLat:lon :Lat :z];
}

/**
 * Ritorna lo zoom corrente della mappa
 * @return (float) zoom corrente
 */
- (float) getZoom {
	return [super zoom];
}

/**
 * Imposta il tipo di Mappa
 * @param (int)PGMapType
 */
const int PaddingCopy = 2;

- (void) setMapType:(int)Type {
	if (m_Params.Copies == nil) return;

  [self isBoundAllowed:[super mapBounds] withType:Type];
  [self ShowCopyrightLabel:Type];
	[super setMapType:Type];
}

- (void) ShowCopyrightLabel:(int)Type {
  switch (Type) {
		case PGMapTypeStandard: [copyRightLabel setTextColor:[UIColor blackColor]]; break;
		case PGMapTypeOrto:     [copyRightLabel setTextColor:[UIColor whiteColor]]; break;
		case PGMapTypeMix:      [copyRightLabel setTextColor:[UIColor whiteColor]]; break;
	}
  
	if ( !(Type < [m_Params.Copies count]) ) return; 
	copyRightLabel.text = [NSString stringWithFormat:@"%@", [m_Params.Copies objectAtIndex:Type]];
	[copyRightLabel setFont:[UIFont fontWithName:@"Arial" size:10]];
	
	CGPoint CopyPosition;
	CopyPosition.x = self.bounds.size.width  - [copyRightLabel.text sizeWithFont:copyRightLabel.font].width  - PaddingCopy;
	CopyPosition.y = self.bounds.size.height - [copyRightLabel.text sizeWithFont:copyRightLabel.font].height - PaddingCopy;
	[copyRightLabel setFrame:CGRectMake(CopyPosition.x + self.bounds.origin.x, CopyPosition.y + self.bounds.origin.y, 
																			[copyRightLabel.text sizeWithFont:copyRightLabel.font].width, 
																			[copyRightLabel.text sizeWithFont:copyRightLabel.font].height)];
	
	[self addSubview:copyRightLabel];
}

/** TODO
 * Ritorna il bound in coordinate dell'area di mappa visibile su schermo
 * @return (PGBound)bound
 */
- (PGBound) getMapBounds {
	return [super mapBounds];
}

/**
 * Ritorna il centro della mappa in coordinate
 * @return (CLLocationCoordinate2D)centro
 */
- (CLLocationCoordinate2D) getMapCenter {
	return [super mapCenter];
}

/**
 * Ritorna la posizione in pixel del punto scelto sulla mappa
 * @param (PGPoint*)point Punto da trovare
 * @return (CGPoint)punto
 */
- (CGPoint) getPointPosition:(PGPoint*)point {
	return [super absoluteCoordinates:point];
}

- (CGPoint) getPosition {
	return super.lastGestureInfo.position;
}


#pragma mark -
#pragma mark PROTECTED METHODS
#pragma mark -

- (void) ComputeBound:(PGBound)Bound andCenter:(CLLocationCoordinate2D*)Center andZoom:(int*)Zoom {
	// Get the distance between the min and max
  double dX = Bound.right - Bound.left;
  double dY = Bound.top   - Bound.bottom;
  
  //The following hardcoded fix is due to the fact that when a PGpoint is really close to
  //the maps' boundaries, you might not see the point.This way, in these cases, I
  //get an higher level of zoom(cover a wider area)
  double ZdXapprox =  dX * 430 / (1609.3 * (self.bounds.size.width  - 40));
  double ZdYapprox =  dY * 430 / (1609.3 * (self.bounds.size.height - 40));
  
  double zoomArray[] = {0.0375, 0.075, 0.15, 0.3, 0.6, 1.2, 2.4, 4.8, 9.6, 19.2, 38.4, 76.8, 153.6, 307.2, 614.4, 1228.8};
  
  //invece il valore che calcoliamo è in R.
  //lo arrotondiamo a uno dei valori possibili tramite:var z = this.map.getZoomIndex(ZdApprox);
  double ZdApprox = (ZdXapprox > ZdYapprox) ? ZdXapprox : ZdYapprox;
	int zIdx = 15;
	
	// 3) Get the next highest fitting zoom
	for( int i=3; i < 16; i++ ) {
		if (ZdApprox <= zoomArray[i]) {
			zIdx = i;
			break;
		}
	}
	
	*Zoom = zIdx - 3;
	
	//compute Center (NOT center of mass, but the real center of the bound region)
	CoordsLL max = [PGFormule UTM2LL:Bound.top    : Bound.right];
	CoordsLL min = [PGFormule UTM2LL:Bound.bottom : Bound.left];
	
	Center->longitude = min.lon + ((max.lon - min.lon) / 2);
	Center->latitude  = min.lat + ((max.lat - min.lat) / 2);
}

- (PGBoundEx*) getMapUtmBounds {
  PGBound viewbound  = [super mapBounds];
  CoordsUTM tr = [PGFormule LL2UTM:viewbound.top    :viewbound.right :32];
  CoordsUTM bl = [PGFormule LL2UTM:viewbound.bottom :viewbound.left  :32];
  return [[[PGBoundEx alloc] InitWithBound:PGBoundMake(tr.northing, bl.easting, bl.northing, tr.easting)] autorelease];
}

- (float) getMaxMapMeters:(float) zoom {
  int val = self.frame.size.width;
  if (val < self.frame.size.height) val = self.frame.size.height;
  return 1.12277 * pow(2, 12 - (12-zoom)) * val;
}


#pragma mark -
#pragma mark POINT METHODS
#pragma mark -

/**
 * Aggiunge un PGPoint su mappa
 * @param (PGPoint*)view Punto da aggiungere
 */
- (void) addPoint:(PGPoint*)view {
  [self ClearCurrentPoint];
	
  m_CurrentPoint = [view retain];
  [m_Points addObject:view];
  [super addPoint:m_CurrentPoint :m_CurrentPoint.Position :m_CurrentPoint.Anchor];
  [self AnimateDropPoints];
}

double tAbs = 0.4;
- (void) AnimateDropPoints {
  tAbs = tAbs + 0.02;
  
  CGRect endFrame = m_CurrentPoint.frame;
  m_CurrentPoint.frame = 
  CGRectMake(m_CurrentPoint.frame.origin.x, -self.frame.size.height, 
             m_CurrentPoint.frame.size.width, m_CurrentPoint.frame.size.height);
  
  [UIView beginAnimations:@"drop" context:nil];
  [UIView setAnimationDuration:tAbs];
  [UIView setAnimationCurve:UIViewAnimationCurveLinear];
  [UIView setAnimationDelegate:self];
  [UIView setAnimationDidStopSelector:@selector(AnimateDropPointsStop)];
  [m_CurrentPoint setFrame:endFrame];
  [UIView commitAnimations];
}
- (void) AnimateDropPointsStop {
  tAbs = 0.4;
}

- (void) removePoints {
  [self ClearCurrentPoint];
  
  for ( PGPoint *point in m_Points ) [super removePoint:point];
  [m_Points removeAllObjects];
}

- (void) showAllPoints {
  [self ClearCurrentPoint];
  
  PGBound b = PGBoundMake(0, 0, 0, 0);
  for ( int idx=0; idx<[m_Points count]; idx++ ) {
    PGPoint *point = [m_Points objectAtIndex:idx];
    if ( idx == 0 ) b = PGBoundMake(point.Position.latitude, point.Position.longitude, point.Position.latitude, point.Position.longitude);
    
    if ( point.Position.latitude  > b.top    ) b.top    = point.Position.latitude;
    if ( point.Position.latitude  < b.bottom ) b.bottom = point.Position.latitude;
    if ( point.Position.longitude < b.left   ) b.left   = point.Position.longitude;
    if ( point.Position.longitude > b.right  ) b.right  = point.Position.longitude;
  }
  
  CoordsUTM tl = [PGFormule LL2UTM:b.top    :b.left  :32];
  CoordsUTM br = [PGFormule LL2UTM:b.bottom :b.right :32];
  b = PGBoundMake(tl.northing, tl.easting, br.northing, br.easting);
  
  int z = 0;
	CLLocationCoordinate2D c;
  [self ComputeBound:b andCenter:&c andZoom:&z];
  
  [self setZoom:z];
  [self moveMapTo:c withAnimation:YES];
}

- (void) ClearCurrentPoint {
  if ( m_CurrentPoint ) {
    [m_CurrentPoint removeCallout];
    [m_CurrentPoint release];
    m_CurrentPoint = nil;
  }
}

#pragma mark -
#pragma mark ROUTE METHODS
#pragma mark -
/**
 * Aggiunge un percorso sulla mappa
 * @param (PGRoute*)aRoute Route da aggiungere
 * @param (PGRouteParams*)par Parametri di configurazione percorso
 */
- (void) addRoute:(PGRoute*) aRoute withParams:(PGRouteParams*)par {
	m_Route = [aRoute retain];
  [m_Route SetParams:par andDelegate:self andServerUrl:[m_Params.Servers objectAtIndex:PGServerRoute] andPFR:m_Params.PointsForRegions];
  
  lastRoutingReqId = 0;
  
  NSMutableDictionary *dict = [NSMutableDictionary dictionary];
  [dict setObject:NSStringFromSelector(@selector(CreateRoute:)) forKey:@"selector"];
  [dict setObject:[m_Route GetUrl:lastRoutingReqId] forKey:@"query"]; 

  PGHttpWrapper *http = [[[PGHttpWrapper alloc] initWithTarget:self] autorelease];
  [http performSelectorOnMainThread:@selector(RequestData:) withObject:dict waitUntilDone:NO];
}

- (void) CreateRoute:(NSData*)Data {
  
  NSString *xml;
  @try {
    xml =[[NSString alloc] initWithData:Data encoding:NSUTF8StringEncoding];
    [m_Route GetRoute:lastRoutingReqId withXml:xml];
    
    if (![PGBoundEx CheckBound:m_Route.Result.RouteBound]) return;
    
    int xZoom = 0;
    CLLocationCoordinate2D xCenter;
    [self ComputeBound:m_Route.Result.RouteBound andCenter:&xCenter andZoom:&xZoom];
    
    [self setZoom:xZoom];
    [self moveMapTo:xCenter withAnimation:YES];
  }
  @catch (PGRouteException *e) 
  {
    [self clearRoute];
    [self ProtocolManager:@selector(MessageError:withException:) andObject:e];
  }

  if (xml) [xml release];

}

- (void) updateRoute:(id)RoutingReqId {	
	if (m_Route) {
    
    NSAutoreleasePool *pool = [[NSAutoreleasePool alloc] init];
    NSMutableArray *points = [NSMutableArray array];

    [m_Route.Params setHiliteUntilIndexEx:[m_Route GetPoints:points ofRouteId:[RoutingReqId intValue]]];
    
		if( m_Route.Result.RouteId == lastRoutingReqId ) {
      m_Route.Bound = [m_Route GetBestBound];
      [m_Route.Params setRouteZoom:[self getZoom]];
      
      [self performSelectorOnMainThread:@selector(DrawRoute:) withObject:points waitUntilDone:NO];
		}
    [pool drain];
	}
}

- (void) DrawRoute:(NSArray*)Points {
	if ( !Points || [Points count] == 0 ) return;
  m_Route.Bound = [m_Route GetBestBound];
  PGWayPoint * wp = [m_Route.Result.WayPoints objectAtIndex:WP_START];
	[super drawRoute:wp.WayPointXY :Points :m_Route.Params.Config];
}

- (PGRStep *) showNextStep {
  if ( !m_Route ) return nil;
  return [self showStepAt:m_Route.Params.HiliteUntilIndex + 1];
}

- (PGRStep *) showPrevStep {
  if ( !m_Route ) return nil;
  return [self showStepAt:m_Route.Params.HiliteUntilIndex - 1];
}

- (PGRStep *) showStepAt:(int)Index {
  if ( !m_Route || Index < 0 || Index > [m_Route.Result.Rsteps count] ) return nil;
  [m_Route.Params setHiliteUntilIndex:Index];
  [self restartTimer];
  return [m_Route.Result RstepAtIndex:m_Route.Params.HiliteUntilIndex];
}

/**
 * Elimina il percorso disegnato su mappa
 */
- (void) clearRoute {
	if ( m_Route ) {
    [m_Route release];
    m_Route = nil;
  }
	[super clearRoute];	
}

#pragma mark -
#pragma mark TIMER
#pragma mark -

- (void) onMapMove:(CloserMap*)m {
}

- (void) onMapZoom:(CloserMap*)m {
}

- (void) handleTransitionEnd:(CloserMap *)map {
  PGEventType type = PGEventTypeMove;
  [m_GpsPoint.Circle enableAnimation];
  
  if ( [super lastTransitionType] == @"zoom" ) {
    [m_GpsPoint.Circle setZoom:[super zoom]];
    type = PGEventTypeZoom;
  }
  [self RefreshRoute];
  
  [self ProtocolManager:@selector(MapBoundChanged:withEvent:) andObject:[NSNumber numberWithInt:type]];
}

- (void) RefreshRoute {
  if ( !m_Route ) return;
  if ( [super lastTransitionType] == @"zoom" ) {
    [self restartTimer];
    return;
  }

  lastRoutingReqId = rand();
  
  if ( ![PGBoundEx CheckBound:m_Route.Bound] ) {
    [self getThreadedXml];
    return;
  }

  PGBoundEx *view = [self getMapUtmBounds];

  if ( [PGDevice GetPlatformType] == UIDevice4iPhone ) [view Increase:[self getMaxMapMeters:[super zoom]]];

  if ( ![view Included:m_Route.Bound] )
    [self getThreadedXml];
}

- (void) restartTimer {
	if ( m_Timer != nil ) {
		[m_Timer invalidate];
		[m_Timer release];
	}
  lastRoutingReqId = rand();
	m_Timer = [[NSTimer scheduledTimerWithTimeInterval:(0.5) target:self selector:@selector(getThreadedXml) userInfo:nil repeats:NO] retain];
}

- (void) getThreadedXml {
  [NSThread detachNewThreadSelector:@selector(updateRoute:) toTarget:self withObject:[NSNumber numberWithInt:lastRoutingReqId]];
}

#pragma mark -
#pragma mark PROTOCOL MANAGEMENT
#pragma mark -

- (void) ProtocolManager:(SEL)selector andObject:(id)Obj {
  if ( !m_Delegate || ![m_Delegate conformsToProtocol:@protocol(PGMapDelegate)] || ![m_Delegate respondsToSelector:selector] ) return;
  
  if ( Obj ) [m_Delegate performSelector:selector withObject:self withObject:Obj];
  else [m_Delegate NetworkNoPresent:self];
}

#pragma mark -
#pragma mark DEALLOC
#pragma mark -

- (void) dealloc {
  
  if ( m_Timer ) {
    [m_Timer invalidate];
    [m_Timer release];
  }
  
  if ( m_Gps )      [m_Gps release];
	if ( m_GpsPoint ) {
    [super removePlaceholder:m_GpsPoint.Circle];
    [super removePoint:m_GpsPoint];
    [m_GpsPoint release];
  }
	
  if ( imgView )        [imgView release];
	if ( copyRightLabel ) [copyRightLabel release];

	if ( m_Route )        [m_Route release];
  if ( m_Points )       [m_Points release];
  if ( m_CurrentPoint ) [m_CurrentPoint release];

	if ( m_Params ) [m_Params release];

  if ( m_Net_HostReach ) [m_Net_HostReach release];
  
  if ( m_AutoreleasePool ) [m_AutoreleasePool release];
  
	[super dealloc];
}

#pragma mark -
#pragma mark NETWORK_NOTIFICATIONS

- (void) handleNetworkChange:(NSNotification *)notice {
  [self CheckNetworkAval];
}

@end
