//
//  Device.m
//  PGLib-dev
//
//  Created by Alberto Pasca on 29/11/10.
//  Copyright 2010 Cutaway SRL. All rights reserved.
//

#import "PGDevice.h"
#import "PGConfig.h"

#include <sys/utsname.h>
#include <sys/socket.h>
#include <sys/sysctl.h>
#include <net/if.h>
#include <net/if_dl.h>

@implementation PGDevice

#pragma mark main screen

+ (CGSize) GetSize {
	return [[UIScreen mainScreen] bounds].size;
}

+ (CGPoint) GetPosition {
	return [[UIScreen mainScreen] bounds].origin;
}

#pragma mark device

+ (NSString*) GetModel {
	return [UIDevice currentDevice].model;
}

+ (BOOL) IsGenericModel:(NSString*)Type {
  return ([[PGDevice GetModel]rangeOfString:Type].location != NSNotFound);
}

+ (NSString*) GetModelImage {
  NSString *img = @"iPhoneImg";
  if ( [[PGDevice GetModel]rangeOfString:@"iPad"].location != NSNotFound ) img = @"iPadImg";
  return [PGConfig GetKey:img ofFile:@"PGConfig"];
}

+ (NSString*) GetName {
	return [UIDevice currentDevice].systemName;
}

+ (NSString*) GetVersion {
	return [UIDevice currentDevice].systemVersion;
}

+ (NSString *) GetSysInfoByName:(char *)typeSpecifier {
	size_t size;
    sysctlbyname(typeSpecifier, NULL, &size, NULL, 0);
    char *answer = malloc(size);
	sysctlbyname(typeSpecifier, answer, &size, NULL, 0);
	NSString *results = [NSString stringWithCString:answer encoding: NSUTF8StringEncoding];
	free(answer);
	return results;
}

+ (NSString *) GetPlatform {
	return [self GetSysInfoByName:"hw.machine"];
}

+ (NSString *) GetHwmodel {
	return [self GetSysInfoByName:"hw.model"];
}

+ (BOOL) isCompassEnabled {
	return [UIDevice currentDevice].proximityMonitoringEnabled;
}

+ (BOOL) IsCompassSupported {
  int type = [self GetPlatformType];

  if ( type == UIDevice1GiPhone || type == UIDevice3GiPhone || type == UIDevice1GiPod ||
       type ==  UIDevice2GiPod || type == UIDevice3GiPod) {
    return NO;
  }
  return YES;
}

+ (NSString*) GetUID {
	return [UIDevice currentDevice].uniqueIdentifier;
}


#pragma mark sysctl utils

+ (NSUInteger) GetSysInfo: (uint) typeSpecifier {
	size_t size = sizeof(int);
	int results;
	int mib[2] = {CTL_HW, typeSpecifier};
	sysctl(mib, 2, &results, &size, NULL, 0);
	return (NSUInteger) results;
}

+ (NSUInteger) GetCpuFrequency {
	return [self GetSysInfo:HW_CPU_FREQ];
}

+ (NSUInteger) GetBusFrequency {
	return [self GetSysInfo:HW_BUS_FREQ];
}

+ (NSUInteger) GetTotalMemory {
	return [self GetSysInfo:HW_PHYSMEM];
}

+ (NSUInteger) GetUserMemory {
	return [self GetSysInfo:HW_USERMEM];
}

+ (NSUInteger) GetMaxSocketBufferSize {
	return [self GetSysInfo:KIPC_MAXSOCKBUF];
}


#pragma mark file system

+ (NSNumber *) GetTotalDiskSpace {
	NSDictionary *fattributes = [[NSFileManager defaultManager] attributesOfFileSystemForPath:NSHomeDirectory() error:nil];
	return [fattributes objectForKey:NSFileSystemSize];
}

+ (NSNumber *) GetFreeDiskSpace {
	NSDictionary *fattributes = [[NSFileManager defaultManager] attributesOfFileSystemForPath:NSHomeDirectory() error:nil];
	return [fattributes objectForKey:NSFileSystemFreeSize];
}

#pragma mark platform type and name utils

+ (NSUInteger) GetPlatformType {
	NSString *platform = [self GetPlatform];
	
	if ([platform isEqualToString:@"iFPGA"]) return UIDeviceIFPGA;
	
	if ([platform isEqualToString:@"iPhone1,1"]) return UIDevice1GiPhone;
	if ([platform isEqualToString:@"iPhone1,2"]) return UIDevice3GiPhone;
	if ([platform hasPrefix:@"iPhone2"]) return UIDevice3GSiPhone;
	if ([platform hasPrefix:@"iPhone3"]) return UIDevice4iPhone;
	if ([platform hasPrefix:@"iPhone4"]) return UIDevice5iPhone;
	
	if ([platform isEqualToString:@"iPod1,1"]) return UIDevice1GiPod;
	if ([platform isEqualToString:@"iPod2,1"]) return UIDevice2GiPod;
	if ([platform isEqualToString:@"iPod3,1"]) return UIDevice3GiPod;
	if ([platform isEqualToString:@"iPod4,1"]) return UIDevice4GiPod;
	
	if ([platform isEqualToString:@"iPad1,1"]) return UIDevice1GiPad;
	if ([platform isEqualToString:@"iPad2,1"]) return UIDevice2GiPad;
	
	if ([platform isEqualToString:@"AppleTV2,1"]) return UIDeviceAppleTV2;
	
	if ([platform hasPrefix:@"iPhone"]) return UIDeviceUnknowniPhone;
	if ([platform hasPrefix:@"iPod"]) return UIDeviceUnknowniPod;
	if ([platform hasPrefix:@"iPad"]) return UIDeviceUnknowniPad;
	
	if ([platform hasSuffix:@"86"] || [platform isEqual:@"x86_64"]) // thanks Jordan Breeding
	{
		if ([[UIScreen mainScreen] bounds].size.width < 768)
			return UIDeviceiPhoneSimulatoriPhone;
		else
			return UIDeviceiPhoneSimulatoriPad;
		
		return UIDeviceiPhoneSimulator;
	}
	return UIDeviceUnknown;
}

+ (NSString *) GetPlatformString {
	switch ([self GetPlatformType])
	{
		case UIDevice1GiPhone: return IPHONE_1G_NAMESTRING;
		case UIDevice3GiPhone: return IPHONE_3G_NAMESTRING;
		case UIDevice3GSiPhone: return IPHONE_3GS_NAMESTRING;
		case UIDevice4iPhone: return IPHONE_4_NAMESTRING;
		case UIDevice5iPhone: return IPHONE_5_NAMESTRING;
		case UIDeviceUnknowniPhone: return IPHONE_UNKNOWN_NAMESTRING;
			
		case UIDevice1GiPod: return IPOD_1G_NAMESTRING;
		case UIDevice2GiPod: return IPOD_2G_NAMESTRING;
		case UIDevice3GiPod: return IPOD_3G_NAMESTRING;
		case UIDevice4GiPod: return IPOD_4G_NAMESTRING;
		case UIDeviceUnknowniPod: return IPOD_UNKNOWN_NAMESTRING;
			
		case UIDevice1GiPad : return IPAD_1G_NAMESTRING;
		case UIDevice2GiPad : return IPAD_2G_NAMESTRING;
			
		case UIDeviceAppleTV2 : return APPLETV_2G_NAMESTRING;
			
		case UIDeviceiPhoneSimulator: return IPHONE_SIMULATOR_NAMESTRING;
		case UIDeviceiPhoneSimulatoriPhone: return IPHONE_SIMULATOR_IPHONE_NAMESTRING;
		case UIDeviceiPhoneSimulatoriPad: return IPHONE_SIMULATOR_IPAD_NAMESTRING;
			
		case UIDeviceIFPGA: return IFPGA_NAMESTRING;
			
		default: return IPOD_FAMILY_UNKNOWN_DEVICE;
	}
}

#pragma mark MAC addy

+ (NSString *) GetMacaddress {
	int mib[6];
	size_t len;
	char *buf;
	unsigned char *ptr;
	struct if_msghdr *ifm;
	struct sockaddr_dl *sdl;
	
	mib[0] = CTL_NET;
	mib[1] = AF_ROUTE;
	mib[2] = 0;
	mib[3] = AF_LINK;
	mib[4] = NET_RT_IFLIST;
	
	if ((mib[5] = if_nametoindex("en0")) == 0) {
		printf("Error: if_nametoindex error\n");
		return NULL;
	}
	
	if (sysctl(mib, 6, NULL, &len, NULL, 0) < 0) {
		printf("Error: sysctl, take 1\n");
		return NULL;
	}
	
	if ((buf = malloc(len)) == NULL) {
		printf("Could not allocate memory. error!\n");
		return NULL;
	}
	
	if (sysctl(mib, 6, buf, &len, NULL, 0) < 0) {
		printf("Error: sysctl, take 2");
		return NULL;
	}
	
	ifm = (struct if_msghdr *)buf;
	sdl = (struct sockaddr_dl *)(ifm + 1);
	ptr = (unsigned char *)LLADDR(sdl);
	NSString *outstring = [NSString stringWithFormat:@"%02x%02x%02x%02x%02x%02x", *ptr, *(ptr+1), *(ptr+2), *(ptr+3), *(ptr+4), *(ptr+5)];
	free(buf);
	return [outstring uppercaseString];
}

+ (NSString *) GetPlatformCode {
	switch ([self GetPlatformType])
	{
		case UIDevice1GiPhone: return @"M68";
		case UIDevice3GiPhone: return @"N82";
		case UIDevice3GSiPhone: return @"N88";
		case UIDevice4iPhone: return @"N89";
		case UIDevice5iPhone: return IPHONE_UNKNOWN_NAMESTRING;
		case UIDeviceUnknowniPhone: return IPHONE_UNKNOWN_NAMESTRING;
			
		case UIDevice1GiPod: return @"N45";
		case UIDevice2GiPod: return @"N72";
		case UIDevice3GiPod: return @"N18";
		case UIDevice4GiPod: return @"N80";
		case UIDeviceUnknowniPod: return IPOD_UNKNOWN_NAMESTRING;
			
		case UIDevice1GiPad: return @"K48";
		case UIDevice2GiPad: return IPAD_UNKNOWN_NAMESTRING;
		case UIDeviceUnknowniPad: return IPAD_UNKNOWN_NAMESTRING;
			
		case UIDeviceAppleTV2: return @"K66";
			
		case UIDeviceiPhoneSimulator: return IPHONE_SIMULATOR_NAMESTRING;
			
		default: return IPOD_FAMILY_UNKNOWN_DEVICE;
	}
}

/*
 "iPod1,1" - iPod Touch 1st Gen
 "iPod2,1" - iPod Touch 2nd Gen
 "iPod3,1" - iPod Touch 3rd Gen
 "iPod4,1" - iPod Touch 4th Gen
 
 "iPhone1,1" - iPhone Original
 "iPhone1,2" - iPhone 3G
 "iPhone2,1" - iPhone 3GS
 "iPhone3,1" - iPhone 4
 "iPhone3,3" - iPhone 4 (CDMA)
 
 "iPad1,1" - iPad Original
 "iPad2,1" - iPad 2 Wifi
 "iPad2,2" - iPad 2 Wifi/GSM
 "iPad2,3" - iPad 2 Wifi/CDMA
 */

+ (NSString *) GetEngineDevice {
  NSMutableDictionary *dictDeviceVersions;
  dictDeviceVersions = [[[NSMutableDictionary alloc] init] autorelease];
  
  // iPod:
  [dictDeviceVersions setObject: @"iPod+touch+1G" forKey: @"iPod1,1"];
  [dictDeviceVersions setObject: @"iPod+touch+2G" forKey: @"iPod2,1"];
  [dictDeviceVersions setObject: @"iPod+touch+3G" forKey: @"iPod3,1"];
  [dictDeviceVersions setObject: @"iPod+touch+4G" forKey: @"iPod4,1"];
  
  // iPhone:
  [dictDeviceVersions setObject: @"iPhone+2G"  forKey: @"iPhone1,1"];
  [dictDeviceVersions setObject: @"iPhone+3G"  forKey: @"iPhone1,2"];
  [dictDeviceVersions setObject: @"iPhone+3GS" forKey: @"iPhone2,1"];
  [dictDeviceVersions setObject: @"iPhone+4G"  forKey: @"iPhone3,1"];
  [dictDeviceVersions setObject: @"iPhone+4G"  forKey: @"iPhone3,3"];
  
  // iPad:
  [dictDeviceVersions setObject: @"iPad+1G" forKey: @"iPhone1,1"];
  [dictDeviceVersions setObject: @"iPad+2G" forKey: @"iPhone2,1"];
  [dictDeviceVersions setObject: @"iPad+2G" forKey: @"iPhone2,2"];
  [dictDeviceVersions setObject: @"iPad+2G" forKey: @"iPhone2,3"];
  
  // default value for Simulator
  [dictDeviceVersions setObject: @"iPhone+4G" forKey: @"i386"];
  
  NSString *deviceVersion = [PGDevice GetPlatform];
  NSString *ret = [dictDeviceVersions objectForKey:deviceVersion];
  if (ret == nil)
    return deviceVersion;
  
  return ret;
}


#pragma mark Ios Availability

+ (BOOL) IsIosAvailableClass:(NSString*)Name andSelector:(SEL)Selector {

  if ( !Name ) return NO;
  Class c = NSClassFromString(Name);

  if ( !Selector ) return (c != nil);
  
  id pointer = [[c alloc] init];
  BOOL res = [pointer respondsToSelector:Selector];
  [pointer release];
  
  return res;
}


#pragma mark UIInterfaceOrientation

+ (CGSize) KeyboardSize:(UIInterfaceOrientation)Orient {

  switch ( Orient ) {
    case UIInterfaceOrientationPortrait:
    case UIInterfaceOrientationPortraitUpsideDown:
      return [PGDevice IsGenericModel:@"iPad"] == YES ? CGSizeMake(768, 264) : CGSizeMake(320, 216);
      
    case UIInterfaceOrientationLandscapeLeft:
    case UIInterfaceOrientationLandscapeRight:
      return [PGDevice IsGenericModel:@"iPad"] ? CGSizeMake(1024, 352) : CGSizeMake(480, 162);
  }
  
  return CGSizeZero;
}

@end
